// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDentalist.WebAPI.Database;

namespace eDentalist.WebAPI.Migrations
{
    [DbContext(typeof(eDentalistDbContext))]
    [Migration("20210419155532_migData")]
    partial class migData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eDentalist.WebAPI.Database.Anamnesis", b =>
                {
                    b.Property<int>("AnamnesisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnamnesisContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Therapy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnamnesisID");

                    b.HasIndex("AppointmentID");

                    b.ToTable("Anamnesis");

                    b.HasData(
                        new
                        {
                            AnamnesisID = 1,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 1",
                            AnamnesisContent = "Sample Anamnesis Content 1",
                            AppointmentID = 5,
                            Therapy = "Sample Anamnesis Therapy 1"
                        },
                        new
                        {
                            AnamnesisID = 2,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 2",
                            AnamnesisContent = "Sample Anamnesis Content 2",
                            AppointmentID = 7,
                            Therapy = "Sample Anamnesis Therapy 2"
                        },
                        new
                        {
                            AnamnesisID = 3,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 3",
                            AnamnesisContent = "Sample Anamnesis Content 3",
                            AppointmentID = 8,
                            Therapy = "Sample Anamnesis Therapy 3"
                        },
                        new
                        {
                            AnamnesisID = 4,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 4",
                            AnamnesisContent = "Sample Anamnesis Content 4",
                            AppointmentID = 1,
                            Therapy = "Sample Anamnesis Therapy 4"
                        },
                        new
                        {
                            AnamnesisID = 5,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 5",
                            AnamnesisContent = "Sample Anamnesis Content 5",
                            AppointmentID = 2,
                            Therapy = "Sample Anamnesis Therapy 5"
                        },
                        new
                        {
                            AnamnesisID = 6,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 6",
                            AnamnesisContent = "Sample Anamnesis Content 6",
                            AppointmentID = 3,
                            Therapy = "Sample Anamnesis Therapy 6"
                        },
                        new
                        {
                            AnamnesisID = 7,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 7",
                            AnamnesisContent = "Sample Anamnesis Content 7",
                            AppointmentID = 4,
                            Therapy = "Sample Anamnesis Therapy 7"
                        },
                        new
                        {
                            AnamnesisID = 8,
                            AdditionalNotes = "Sample Anamnesis Additional Notes 8",
                            AnamnesisContent = "Sample Anamnesis Content 8",
                            AppointmentID = 6,
                            Therapy = "Sample Anamnesis Therapy 8"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("DentistID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("ProcedureID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<int>("WorkdayID")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("AppointmentStatusID");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ProcedureID");

                    b.HasIndex("WorkdayID");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            AppointmentID = 1,
                            AppointmentStatusID = 2,
                            DentistID = 4,
                            From = new TimeSpan(0, 12, 0, 0, 0),
                            PatientID = 3,
                            ProcedureID = 4,
                            To = new TimeSpan(0, 12, 30, 0, 0),
                            WorkdayID = 1
                        },
                        new
                        {
                            AppointmentID = 2,
                            AppointmentStatusID = 2,
                            DentistID = 5,
                            From = new TimeSpan(0, 16, 0, 0, 0),
                            PatientID = 7,
                            ProcedureID = 7,
                            To = new TimeSpan(0, 16, 30, 0, 0),
                            WorkdayID = 1
                        },
                        new
                        {
                            AppointmentID = 3,
                            AppointmentStatusID = 2,
                            DentistID = 6,
                            From = new TimeSpan(0, 10, 30, 0, 0),
                            PatientID = 3,
                            ProcedureID = 6,
                            To = new TimeSpan(0, 11, 0, 0, 0),
                            WorkdayID = 2
                        },
                        new
                        {
                            AppointmentID = 4,
                            AppointmentStatusID = 2,
                            DentistID = 8,
                            From = new TimeSpan(0, 17, 30, 0, 0),
                            PatientID = 7,
                            ProcedureID = 4,
                            To = new TimeSpan(0, 18, 0, 0, 0),
                            WorkdayID = 2
                        },
                        new
                        {
                            AppointmentID = 5,
                            AppointmentStatusID = 2,
                            DentistID = 8,
                            From = new TimeSpan(0, 18, 30, 0, 0),
                            PatientID = 10,
                            ProcedureID = 5,
                            To = new TimeSpan(0, 19, 0, 0, 0),
                            WorkdayID = 2
                        },
                        new
                        {
                            AppointmentID = 6,
                            AppointmentStatusID = 2,
                            DentistID = 4,
                            From = new TimeSpan(0, 18, 30, 0, 0),
                            PatientID = 7,
                            ProcedureID = 5,
                            To = new TimeSpan(0, 19, 0, 0, 0),
                            WorkdayID = 3
                        },
                        new
                        {
                            AppointmentID = 7,
                            AppointmentStatusID = 2,
                            DentistID = 4,
                            From = new TimeSpan(0, 19, 30, 0, 0),
                            PatientID = 10,
                            ProcedureID = 8,
                            To = new TimeSpan(0, 20, 0, 0, 0),
                            WorkdayID = 3
                        },
                        new
                        {
                            AppointmentID = 8,
                            AppointmentStatusID = 2,
                            DentistID = 5,
                            From = new TimeSpan(0, 9, 30, 0, 0),
                            PatientID = 10,
                            ProcedureID = 7,
                            To = new TimeSpan(0, 10, 0, 0, 0),
                            WorkdayID = 4
                        },
                        new
                        {
                            AppointmentID = 9,
                            AppointmentStatusID = 4,
                            DentistID = 6,
                            From = new TimeSpan(0, 19, 30, 0, 0),
                            PatientID = 3,
                            ProcedureID = 4,
                            To = new TimeSpan(0, 20, 0, 0, 0),
                            WorkdayID = 5
                        },
                        new
                        {
                            AppointmentID = 10,
                            AppointmentStatusID = 4,
                            DentistID = 8,
                            From = new TimeSpan(0, 17, 30, 0, 0),
                            PatientID = 10,
                            ProcedureID = 5,
                            To = new TimeSpan(0, 18, 0, 0, 0),
                            WorkdayID = 5
                        },
                        new
                        {
                            AppointmentID = 11,
                            AppointmentStatusID = 4,
                            DentistID = 8,
                            From = new TimeSpan(0, 18, 0, 0, 0),
                            PatientID = 3,
                            ProcedureID = 6,
                            To = new TimeSpan(0, 18, 30, 0, 0),
                            WorkdayID = 5
                        },
                        new
                        {
                            AppointmentID = 12,
                            AppointmentStatusID = 4,
                            DentistID = 4,
                            From = new TimeSpan(0, 8, 0, 0, 0),
                            PatientID = 3,
                            ProcedureID = 6,
                            To = new TimeSpan(0, 8, 30, 0, 0),
                            WorkdayID = 6
                        },
                        new
                        {
                            AppointmentID = 13,
                            AppointmentStatusID = 4,
                            DentistID = 5,
                            From = new TimeSpan(0, 18, 0, 0, 0),
                            PatientID = 10,
                            ProcedureID = 3,
                            To = new TimeSpan(0, 18, 30, 0, 0),
                            WorkdayID = 6
                        },
                        new
                        {
                            AppointmentID = 14,
                            AppointmentStatusID = 4,
                            DentistID = 6,
                            From = new TimeSpan(0, 7, 30, 0, 0),
                            PatientID = 7,
                            ProcedureID = 4,
                            To = new TimeSpan(0, 8, 0, 0, 0),
                            WorkdayID = 7
                        },
                        new
                        {
                            AppointmentID = 15,
                            AppointmentStatusID = 1,
                            DentistID = 8,
                            From = new TimeSpan(0, 9, 30, 0, 0),
                            PatientID = 10,
                            ProcedureID = 5,
                            To = new TimeSpan(0, 10, 0, 0, 0),
                            WorkdayID = 8
                        },
                        new
                        {
                            AppointmentID = 16,
                            AppointmentStatusID = 1,
                            DentistID = 8,
                            From = new TimeSpan(0, 10, 30, 0, 0),
                            PatientID = 3,
                            ProcedureID = 5,
                            To = new TimeSpan(0, 11, 0, 0, 0),
                            WorkdayID = 8
                        },
                        new
                        {
                            AppointmentID = 17,
                            AppointmentStatusID = 1,
                            DentistID = 4,
                            From = new TimeSpan(0, 16, 30, 0, 0),
                            PatientID = 7,
                            ProcedureID = 8,
                            To = new TimeSpan(0, 17, 0, 0, 0),
                            WorkdayID = 8
                        },
                        new
                        {
                            AppointmentID = 18,
                            AppointmentStatusID = 1,
                            DentistID = 5,
                            From = new TimeSpan(0, 10, 30, 0, 0),
                            PatientID = 3,
                            ProcedureID = 5,
                            To = new TimeSpan(0, 11, 0, 0, 0),
                            WorkdayID = 9
                        },
                        new
                        {
                            AppointmentID = 19,
                            AppointmentStatusID = 1,
                            DentistID = 8,
                            From = new TimeSpan(0, 15, 30, 0, 0),
                            PatientID = 10,
                            ProcedureID = 6,
                            To = new TimeSpan(0, 16, 0, 0, 0),
                            WorkdayID = 9
                        },
                        new
                        {
                            AppointmentID = 20,
                            AppointmentStatusID = 1,
                            DentistID = 8,
                            From = new TimeSpan(0, 16, 30, 0, 0),
                            PatientID = 7,
                            ProcedureID = 8,
                            To = new TimeSpan(0, 17, 0, 0, 0),
                            WorkdayID = 9
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.AppointmentStatus", b =>
                {
                    b.Property<int>("AppointmentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentStatusID");

                    b.ToTable("AppointmentStatus");

                    b.HasData(
                        new
                        {
                            AppointmentStatusID = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            AppointmentStatusID = 2,
                            Name = "Done"
                        },
                        new
                        {
                            AppointmentStatusID = 3,
                            Name = "Cancelled"
                        },
                        new
                        {
                            AppointmentStatusID = 4,
                            Name = "Approved"
                        },
                        new
                        {
                            AppointmentStatusID = 5,
                            Name = "Declined"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Bill", b =>
                {
                    b.Property<int>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("BIT");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("BillID");

                    b.HasIndex("AppointmentID");

                    b.ToTable("Bill");

                    b.HasData(
                        new
                        {
                            BillID = 1,
                            AppointmentID = 5,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2),
                            IsPaid = true,
                            PaymentAmount = 45m
                        },
                        new
                        {
                            BillID = 2,
                            AppointmentID = 7,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(640),
                            IsPaid = true,
                            PaymentAmount = 20m
                        },
                        new
                        {
                            BillID = 3,
                            AppointmentID = 8,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(667),
                            IsPaid = false,
                            PaymentAmount = 100m
                        },
                        new
                        {
                            BillID = 4,
                            AppointmentID = 1,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(670),
                            IsPaid = true,
                            PaymentAmount = 30m
                        },
                        new
                        {
                            BillID = 5,
                            AppointmentID = 2,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(673),
                            IsPaid = true,
                            PaymentAmount = 100m
                        },
                        new
                        {
                            BillID = 6,
                            AppointmentID = 3,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(676),
                            IsPaid = true,
                            PaymentAmount = 50m
                        },
                        new
                        {
                            BillID = 7,
                            AppointmentID = 4,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(678),
                            IsPaid = true,
                            PaymentAmount = 30m
                        },
                        new
                        {
                            BillID = 8,
                            AppointmentID = 6,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(681),
                            IsPaid = true,
                            PaymentAmount = 45m
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZIPCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("CountryID");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityID = 1,
                            CountryID = 1,
                            Name = "Mostar",
                            ZIPCode = "88000"
                        },
                        new
                        {
                            CityID = 2,
                            CountryID = 1,
                            Name = "Sarajevo",
                            ZIPCode = "71000"
                        },
                        new
                        {
                            CityID = 3,
                            CountryID = 1,
                            Name = "Banja Luka",
                            ZIPCode = "78000"
                        },
                        new
                        {
                            CityID = 4,
                            CountryID = 1,
                            Name = "Unassigned",
                            ZIPCode = "00000"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryID = 2,
                            Name = "Croatia"
                        },
                        new
                        {
                            CountryID = 3,
                            Name = "Serbia"
                        },
                        new
                        {
                            CountryID = 4,
                            Name = "United States of America"
                        },
                        new
                        {
                            CountryID = 5,
                            Name = "France"
                        },
                        new
                        {
                            CountryID = 6,
                            Name = "Germany"
                        },
                        new
                        {
                            CountryID = 7,
                            Name = "Sweden"
                        },
                        new
                        {
                            CountryID = 8,
                            Name = "Norway"
                        },
                        new
                        {
                            CountryID = 9,
                            Name = "Denmark"
                        },
                        new
                        {
                            CountryID = 10,
                            Name = "Spain"
                        },
                        new
                        {
                            CountryID = 11,
                            Name = "Japan"
                        },
                        new
                        {
                            CountryID = 12,
                            Name = "China"
                        },
                        new
                        {
                            CountryID = 13,
                            Name = "South Korea"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Condition")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentID");

                    b.HasIndex("EquipmentTypeID");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            EquipmentID = 1,
                            Amount = 1,
                            Condition = false,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(92),
                            Description = "The Elevance Dental Chair comes standard with programmable chair controls and a hydraulic drive system for smooth, quiet, precise operation.",
                            EquipmentTypeID = 1,
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(315),
                            Name = "Midmark Elevance"
                        },
                        new
                        {
                            EquipmentID = 2,
                            Amount = 1,
                            Condition = true,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1196),
                            Description = "Sample Description 1",
                            EquipmentTypeID = 1,
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1212),
                            Name = "Belmont Quolis Q-5000"
                        },
                        new
                        {
                            EquipmentID = 4,
                            Amount = 1,
                            Condition = false,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1243),
                            Description = "Sample Description 2",
                            EquipmentTypeID = 2,
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1246),
                            Name = "FIMET F1"
                        },
                        new
                        {
                            EquipmentID = 5,
                            Amount = 4,
                            Condition = true,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1249),
                            Description = "Sample Description 3",
                            EquipmentTypeID = 3,
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1251),
                            Name = "EdgeMaker2000 Surgical Sharpening System"
                        },
                        new
                        {
                            EquipmentID = 6,
                            Amount = 1,
                            Condition = true,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1254),
                            Description = "Sample Description 4",
                            EquipmentTypeID = 5,
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(1256),
                            Name = "Mercury 3 Dental Laser System"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.EquipmentType", b =>
                {
                    b.Property<int>("EquipmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentTypeID");

                    b.ToTable("EquipmentType");

                    b.HasData(
                        new
                        {
                            EquipmentTypeID = 1,
                            Name = "Dental Chair"
                        },
                        new
                        {
                            EquipmentTypeID = 2,
                            Name = "Dental Engine"
                        },
                        new
                        {
                            EquipmentTypeID = 3,
                            Name = "Miscellaneous"
                        },
                        new
                        {
                            EquipmentTypeID = 4,
                            Name = "X-Ray Machine"
                        },
                        new
                        {
                            EquipmentTypeID = 5,
                            Name = "Dental Laser"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            Name = "Male"
                        },
                        new
                        {
                            GenderID = 2,
                            Name = "Female"
                        },
                        new
                        {
                            GenderID = 3,
                            Name = "Other"
                        },
                        new
                        {
                            GenderID = 4,
                            Name = "Unassigned"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.HygieneProcess", b =>
                {
                    b.Property<int>("HygieneProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfPerformance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HygieneProcessTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("HygieneProcessID");

                    b.HasIndex("HygieneProcessTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("HygieneProcess");

                    b.HasData(
                        new
                        {
                            HygieneProcessID = 1,
                            DateOfPerformance = new DateTime(2021, 4, 18, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2012),
                            Description = "Sample Description 1",
                            HygieneProcessTypeID = 1,
                            Status = true,
                            UserID = 4
                        },
                        new
                        {
                            HygieneProcessID = 2,
                            DateOfPerformance = new DateTime(2021, 4, 17, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2906),
                            Description = "Sample Description 2",
                            HygieneProcessTypeID = 2,
                            Status = true,
                            UserID = 5
                        },
                        new
                        {
                            HygieneProcessID = 3,
                            DateOfPerformance = new DateTime(2021, 4, 16, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2942),
                            Description = "Sample Description 3",
                            HygieneProcessTypeID = 1,
                            Status = true,
                            UserID = 6
                        },
                        new
                        {
                            HygieneProcessID = 4,
                            DateOfPerformance = new DateTime(2021, 4, 15, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2946),
                            Description = "Sample Description 4",
                            HygieneProcessTypeID = 1,
                            Status = true,
                            UserID = 8
                        },
                        new
                        {
                            HygieneProcessID = 5,
                            DateOfPerformance = new DateTime(2021, 4, 14, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2949),
                            Description = "Sample Description 5",
                            HygieneProcessTypeID = 1,
                            Status = true,
                            UserID = 4
                        },
                        new
                        {
                            HygieneProcessID = 6,
                            DateOfPerformance = new DateTime(2021, 4, 13, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2951),
                            Description = "Sample Description 6",
                            HygieneProcessTypeID = 2,
                            Status = true,
                            UserID = 5
                        },
                        new
                        {
                            HygieneProcessID = 7,
                            DateOfPerformance = new DateTime(2021, 4, 12, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2954),
                            Description = "Sample Description 7",
                            HygieneProcessTypeID = 1,
                            Status = true,
                            UserID = 6
                        },
                        new
                        {
                            HygieneProcessID = 9,
                            DateOfPerformance = new DateTime(2021, 4, 11, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(2956),
                            Description = "Sample Description 8",
                            HygieneProcessTypeID = 1,
                            Status = true,
                            UserID = 8
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.HygieneProcessType", b =>
                {
                    b.Property<int>("HygieneProcessTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HygieneProcessTypeID");

                    b.ToTable("HygieneProcessType");

                    b.HasData(
                        new
                        {
                            HygieneProcessTypeID = 1,
                            Description = "Sterilization refers to any process that removes, kills, or deactivates all forms of life (in particular referring to microorganisms such as fungi, bacteria, spores, unicellular eukaryotic organisms such as Plasmodium, etc.) and other biological agents like prions present in a specific surface, object or fluid, for example food or biological culture media.",
                            Name = "Sterilization"
                        },
                        new
                        {
                            HygieneProcessTypeID = 2,
                            Description = "Disinfection describes a process that eliminates many or all pathogenic microorganisms, except bacterial spores, on inanimate objects.",
                            Name = "Disinfection"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Material", b =>
                {
                    b.Property<int>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialID");

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            MaterialID = 1,
                            Amount = 3,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2155),
                            Description = "Coltosol F is a temporary, eugenol-free filling material.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2363),
                            Name = "Coltosol F"
                        },
                        new
                        {
                            MaterialID = 2,
                            Amount = 4,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2763),
                            Description = "Helioseal F Plus is a lightcuring, white-pigmented, fluoride-releasing fissure sealant. Helioseal F Plus is flowable and it is easy to distribute on intricate surfaces – even in the upper jaw. The tight marginal seal provides protection against cariogenic germs.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2797),
                            Name = "Helioseal F Plus"
                        },
                        new
                        {
                            MaterialID = 3,
                            Amount = 1,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2810),
                            Description = "DeTrey Zinc is a fine grain zinc phosphate cement.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2812),
                            Name = "DeTrey Zinc Cement"
                        },
                        new
                        {
                            MaterialID = 4,
                            Amount = 13,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2815),
                            Description = "Venus Diamond is a nano-hybrid universal composite that combines low shrinkage and high strength in a unique way.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2818),
                            Name = "Venus Diamond"
                        },
                        new
                        {
                            MaterialID = 5,
                            Amount = 1,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2820),
                            Description = "Lucitone 199 denture resin is an acrylic base material used for fabricating dentures.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2822),
                            Name = "Lucitone 199"
                        },
                        new
                        {
                            MaterialID = 6,
                            Amount = 1000,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2825),
                            Description = "Dispersed phase Non Gamma 2 amalgam with a high silver content that guarantees an excellent marginal seal.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2828),
                            Name = "Ventura High Alloy"
                        },
                        new
                        {
                            MaterialID = 7,
                            Amount = 123,
                            DateAdded = new DateTime(2021, 1, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2830),
                            Description = "GC Fuji IX GP EXTRA is a conventional glass ionomer restorative that chemically bonds to both enamel and dentin.",
                            LastUsed = new DateTime(2021, 4, 19, 17, 55, 31, 777, DateTimeKind.Local).AddTicks(2833),
                            Name = "GC Fuji IX GP EXTRA"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Procedure", b =>
                {
                    b.Property<int>("ProcedureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProcedureID");

                    b.ToTable("Procedure");

                    b.HasData(
                        new
                        {
                            ProcedureID = 2,
                            Description = "Sample Text 1",
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            Name = "Direct Dental Bonding",
                            Price = 50m,
                            Status = false
                        },
                        new
                        {
                            ProcedureID = 3,
                            Description = "Sample Text 2",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Composite Dental Bonding",
                            Price = 50m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 4,
                            Description = "Sample Text 3",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Composite Veneer Bonding",
                            Price = 30m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 5,
                            Description = "The Traditional type of bridge is composed of one dental crown adhered to both the surrounding teeth with a fake tooth or teeth in the between.  With this, the dental crowns provide anchor points, while the fake tooth “bridges” the gap.",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Traditional Dental Bridge",
                            Price = 45m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 6,
                            Description = "Cantilever dental bridges deviate in structure from traditional dental bridges and only use a single anchor tooth.",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Cantilever Dental Bridge",
                            Price = 50m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 7,
                            Description = "A Maryland bonded bridge uses the same structure as a traditional dental bridge, however instead of using dental crowns as anchors, a metal or porcelain framework is used.",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Maryland Bonded Bridge",
                            Price = 100m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 8,
                            Description = "Implant-supported dental bridges use the same structure as traditional bridges, however they are anchored in place with dental implants.",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Implant-Supported Bridge",
                            Price = 20m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 9,
                            Description = "Dental sealants, usually applied to the chewing surface of teeth, act as a barrier against decay-causing bacteria.",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Dental Sealant",
                            Price = 50m,
                            Status = true
                        },
                        new
                        {
                            ProcedureID = 10,
                            Description = "Tooth whitening or tooth bleaching is the process of lightening the color of human teeth.",
                            Duration = new TimeSpan(0, 0, 40, 0, 0),
                            Name = "Teeth Whitening",
                            Price = 45m,
                            Status = true
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("ProcedureID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("ProcedureID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            RatingID = 1,
                            Comment = "Sample Rating Comment 1",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(1551),
                            Grade = 5,
                            ProcedureID = 5,
                            UserID = 10
                        },
                        new
                        {
                            RatingID = 2,
                            Comment = "Sample Rating Comment 2",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2121),
                            Grade = 3,
                            ProcedureID = 7,
                            UserID = 10
                        },
                        new
                        {
                            RatingID = 3,
                            Comment = "Sample Rating Comment 3",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2147),
                            Grade = 4,
                            ProcedureID = 8,
                            UserID = 10
                        },
                        new
                        {
                            RatingID = 4,
                            Comment = "Sample Rating Comment 4",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2150),
                            Grade = 3,
                            ProcedureID = 4,
                            UserID = 3
                        },
                        new
                        {
                            RatingID = 5,
                            Comment = "Sample Rating Comment 5",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2152),
                            Grade = 2,
                            ProcedureID = 7,
                            UserID = 7
                        },
                        new
                        {
                            RatingID = 6,
                            Comment = "Sample Rating Comment 6",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2155),
                            Grade = 5,
                            ProcedureID = 6,
                            UserID = 3
                        },
                        new
                        {
                            RatingID = 7,
                            Comment = "Sample Rating Comment 7",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2157),
                            Grade = 4,
                            ProcedureID = 4,
                            UserID = 7
                        },
                        new
                        {
                            RatingID = 8,
                            Comment = "Sample Rating Comment 8",
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 779, DateTimeKind.Local).AddTicks(2160),
                            Grade = 3,
                            ProcedureID = 5,
                            UserID = 7
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Requisition", b =>
                {
                    b.Property<int>("RequisitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRequisitioned")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequisitionID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("MaterialID");

                    b.HasIndex("UserID");

                    b.ToTable("Requisition");

                    b.HasData(
                        new
                        {
                            RequisitionID = 3,
                            Amount = 4,
                            DateRequisitioned = new DateTime(2021, 4, 18, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(3715),
                            MaterialID = 1,
                            Status = true,
                            UserID = 3
                        },
                        new
                        {
                            RequisitionID = 4,
                            Amount = 1,
                            DateRequisitioned = new DateTime(2021, 4, 17, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4673),
                            EquipmentID = 1,
                            Status = true,
                            UserID = 3
                        },
                        new
                        {
                            RequisitionID = 6,
                            Amount = 1,
                            DateRequisitioned = new DateTime(2021, 3, 30, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4709),
                            EquipmentID = 1,
                            Status = false,
                            UserID = 4
                        },
                        new
                        {
                            RequisitionID = 8,
                            Amount = 14,
                            DateRequisitioned = new DateTime(2021, 4, 14, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4712),
                            MaterialID = 2,
                            Status = false,
                            UserID = 3
                        },
                        new
                        {
                            RequisitionID = 9,
                            Amount = 10,
                            DateRequisitioned = new DateTime(2021, 3, 25, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4715),
                            MaterialID = 2,
                            Status = true,
                            UserID = 4
                        },
                        new
                        {
                            RequisitionID = 10,
                            Amount = 3,
                            DateRequisitioned = new DateTime(2021, 2, 28, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4718),
                            MaterialID = 2,
                            Status = true,
                            UserID = 4
                        },
                        new
                        {
                            RequisitionID = 11,
                            Amount = 1,
                            DateRequisitioned = new DateTime(2021, 3, 20, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4721),
                            EquipmentID = 1,
                            Status = true,
                            UserID = 3
                        },
                        new
                        {
                            RequisitionID = 12,
                            Amount = 2,
                            DateRequisitioned = new DateTime(2021, 3, 20, 17, 55, 31, 778, DateTimeKind.Local).AddTicks(4724),
                            MaterialID = 7,
                            Status = true,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Shift", b =>
                {
                    b.Property<int>("ShiftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.HasKey("ShiftID");

                    b.ToTable("Shift");

                    b.HasData(
                        new
                        {
                            ShiftID = 5,
                            From = new TimeSpan(0, 7, 0, 0, 0),
                            ShiftNumber = 1,
                            To = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            ShiftID = 6,
                            From = new TimeSpan(0, 15, 0, 0, 0),
                            ShiftNumber = 2,
                            To = new TimeSpan(0, 23, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("CityID");

                    b.HasIndex("GenderID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Address = "Sample Address 1",
                            CityID = 1,
                            DateOfBirth = new DateTime(1997, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail1@hotmail.com",
                            FirstName = "Toni",
                            GenderID = 1,
                            JMBG = "123456789101",
                            LastName = "Buconjić",
                            PasswordHash = "rGSytp3E0Hl2uvmU+53Dp8fU4ien7zhi1sP4s//eHPY27FZlS2G2F1ZBkmR/+rW7Bils/77izkhqLkBltf7IOQ==",
                            PasswordSalt = "shA6VH2F5Qs+8lWDXPXcLA==",
                            PhoneNumber = "123-456-789",
                            UserRoleID = 1,
                            Username = "toniAdministrator"
                        },
                        new
                        {
                            UserID = 2,
                            Address = "Sample Address 2",
                            CityID = 2,
                            DateOfBirth = new DateTime(1977, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail2@hotmail.com",
                            FirstName = "John",
                            GenderID = 1,
                            JMBG = "2222222222222",
                            LastName = "Smith",
                            PasswordHash = "k4vYDitQ/4atIshu6rIcvIi3FUai/rJXqttYljS12mIqwknM57o0maHdAJ9owdCz5O8RRSF1qBf6EKLu4T9HuA==",
                            PasswordSalt = "htC9d7x2gjqkyvMfuoisQA==",
                            PhoneNumber = "123-456-111",
                            UserRoleID = 1,
                            Username = "smithAdministrator"
                        },
                        new
                        {
                            UserID = 3,
                            Address = "Sample Address 3",
                            CityID = 1,
                            DateOfBirth = new DateTime(1986, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail3@hotmail.com",
                            FirstName = "Miss",
                            GenderID = 2,
                            JMBG = "123123123123",
                            LastName = "Patient",
                            PasswordHash = "6S5M0uh9quIfedWFlkj40MtRccKDDPQ+fYGEsSsFIhZfkmxEQwuNglSgFYtPSKOOQQ8tE2B50YMQr/J7G0PXKg==",
                            PasswordSalt = "lvBceA28cek8WqfBpjhb4w==",
                            PhoneNumber = "123-456-112",
                            UserRoleID = 3,
                            Username = "patientUser1"
                        },
                        new
                        {
                            UserID = 4,
                            Address = "Sample Address 4",
                            CityID = 1,
                            DateOfBirth = new DateTime(1981, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail4@hotmail.com",
                            FirstName = "Mister",
                            GenderID = 1,
                            JMBG = "1234567123111",
                            LastName = "Dentist",
                            PasswordHash = "HNoTAmgSr8pIWUBSyhLsSBagMiRs8RtJXhf7xiF8WsGPzkAqMm/U22GAq633m4AjKjsRNxQ998M4rS3hgzoEJA==",
                            PasswordSalt = "uQxEPQSUR1XN1qA/2ZddKQ==",
                            PhoneNumber = "123-456-113",
                            UserRoleID = 2,
                            Username = "dentistUser1"
                        },
                        new
                        {
                            UserID = 5,
                            Address = "Sample Address 5",
                            CityID = 1,
                            DateOfBirth = new DateTime(1982, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail5@hotmail.com",
                            FirstName = "Robert",
                            GenderID = 1,
                            JMBG = "1234567123114",
                            LastName = "Robertson",
                            PasswordHash = "NvvsX3czaEeQG+7SApP33xWJxdDTRGV4G+SggreZMrafxZQaGFM+Odd5pMPcp0B3kRvF05LtB/7/T4PetQ6sAg==",
                            PasswordSalt = "h+Zc2PyiFgkjJlMpLChjAg==",
                            PhoneNumber = "123-456-114",
                            UserRoleID = 2,
                            Username = "dentistUser2"
                        },
                        new
                        {
                            UserID = 6,
                            Address = "Sample Address 6",
                            CityID = 1,
                            DateOfBirth = new DateTime(1971, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail6@hotmail.com",
                            FirstName = "Rick",
                            GenderID = 1,
                            JMBG = "4234525123454",
                            LastName = "Astley",
                            PasswordHash = "w3VKqA5LC68SyZ3uQZys9jhFNOSDylurW0I1J+G7ywFNfv4a07aMl2WuYdmQiI94fWRJ9UcfDAbbtKHbLZd5Vw==",
                            PasswordSalt = "AHS3v4ZONtqfXUI/I9cAHg==",
                            PhoneNumber = "123-456-115",
                            UserRoleID = 2,
                            Username = "dentistUser3"
                        },
                        new
                        {
                            UserID = 7,
                            Address = "Sample Address 7",
                            CityID = 1,
                            DateOfBirth = new DateTime(1961, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail7@hotmail.com",
                            FirstName = "Michael",
                            GenderID = 3,
                            JMBG = "5656565656565",
                            LastName = "Jackson",
                            PasswordHash = "5Mt9EFAxlUMklBDGXL85G+K/dJtFYYj9N44sFXJyo1bZaGBPl+tmRoM3mIsZe8YCQgl+B8p5Zz5QEA1m2ef3wQ==",
                            PasswordSalt = "m4nlzGtdTES0VdY5KuBiTA==",
                            PhoneNumber = "123-456-116",
                            UserRoleID = 3,
                            Username = "patientUser2"
                        },
                        new
                        {
                            UserID = 8,
                            Address = "Sample Address 8",
                            CityID = 1,
                            DateOfBirth = new DateTime(1959, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail8@hotmail.com",
                            FirstName = "Luke",
                            GenderID = 1,
                            JMBG = "1010101010101",
                            LastName = "Skywalker",
                            PasswordHash = "C/V1Jk5mFuGNNn3Mb7KGEvD/AfYvdydOPzuIKLa9SKHuffSp2wl6dF6mzQuPxF6X15BG8nD27zv5gZqEIlIRgA==",
                            PasswordSalt = "91pxTS0BD74rnRa1aaaQfw==",
                            PhoneNumber = "123-456-117",
                            UserRoleID = 2,
                            Username = "dentist"
                        },
                        new
                        {
                            UserID = 9,
                            Address = "Sample Address 9",
                            CityID = 2,
                            DateOfBirth = new DateTime(1984, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail9@hotmail.com",
                            FirstName = "John",
                            GenderID = 1,
                            JMBG = "1234123412341",
                            LastName = "Doe",
                            PasswordHash = "g2UAVTHQd3nn8RZCPqo2sBkec6IXLCMi426vN9u3/GobI3dkuKmyTbmBrnv7+8y7quLl+3LEDrOSBa5Sv9wnQA==",
                            PasswordSalt = "SOVoL/QZ50aDUF2DmXzNSw==",
                            PhoneNumber = "123-456-118",
                            UserRoleID = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserID = 10,
                            Address = "Sample Address 10",
                            CityID = 3,
                            DateOfBirth = new DateTime(1994, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sampleEmail10@hotmail.com",
                            FirstName = "Peter",
                            GenderID = 1,
                            JMBG = "1234123412342",
                            LastName = "Parker",
                            PasswordHash = "sjfNOhItWD5rSo/drRe2UAdZphjWH9PONk7g4CIFxtkxZyRL5o8/+3t20dNhYF6WTQivmFy1m7ntcuD4Yf5VfQ==",
                            PasswordSalt = "XWSd/kaTqdmQX8WdlHv4YQ==",
                            PhoneNumber = "123-456-119",
                            UserRoleID = 3,
                            Username = "patient"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            Description = "Administrative role that has access to all functionalities that the application offers.",
                            Name = "Administrator"
                        },
                        new
                        {
                            UserRoleID = 2,
                            Description = "Sample text.",
                            Name = "Dentist"
                        },
                        new
                        {
                            UserRoleID = 3,
                            Description = "Sample text.",
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.UserWorkday", b =>
                {
                    b.Property<int>("UserWorkdayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkdayID")
                        .HasColumnType("int");

                    b.HasKey("UserWorkdayID");

                    b.HasIndex("ShiftID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkdayID");

                    b.ToTable("UserWorkday");

                    b.HasData(
                        new
                        {
                            UserWorkdayID = 1,
                            ShiftID = 5,
                            UserID = 4,
                            WorkdayID = 1
                        },
                        new
                        {
                            UserWorkdayID = 2,
                            ShiftID = 6,
                            UserID = 5,
                            WorkdayID = 1
                        },
                        new
                        {
                            UserWorkdayID = 3,
                            ShiftID = 5,
                            UserID = 6,
                            WorkdayID = 2
                        },
                        new
                        {
                            UserWorkdayID = 4,
                            ShiftID = 6,
                            UserID = 8,
                            WorkdayID = 2
                        },
                        new
                        {
                            UserWorkdayID = 5,
                            ShiftID = 6,
                            UserID = 4,
                            WorkdayID = 3
                        },
                        new
                        {
                            UserWorkdayID = 6,
                            ShiftID = 5,
                            UserID = 5,
                            WorkdayID = 4
                        },
                        new
                        {
                            UserWorkdayID = 7,
                            ShiftID = 6,
                            UserID = 6,
                            WorkdayID = 5
                        },
                        new
                        {
                            UserWorkdayID = 8,
                            ShiftID = 6,
                            UserID = 8,
                            WorkdayID = 5
                        },
                        new
                        {
                            UserWorkdayID = 9,
                            ShiftID = 5,
                            UserID = 4,
                            WorkdayID = 6
                        },
                        new
                        {
                            UserWorkdayID = 10,
                            ShiftID = 6,
                            UserID = 5,
                            WorkdayID = 6
                        },
                        new
                        {
                            UserWorkdayID = 11,
                            ShiftID = 5,
                            UserID = 6,
                            WorkdayID = 7
                        },
                        new
                        {
                            UserWorkdayID = 12,
                            ShiftID = 5,
                            UserID = 8,
                            WorkdayID = 8
                        },
                        new
                        {
                            UserWorkdayID = 13,
                            ShiftID = 6,
                            UserID = 4,
                            WorkdayID = 8
                        },
                        new
                        {
                            UserWorkdayID = 14,
                            ShiftID = 5,
                            UserID = 5,
                            WorkdayID = 9
                        },
                        new
                        {
                            UserWorkdayID = 15,
                            ShiftID = 6,
                            UserID = 8,
                            WorkdayID = 9
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Workday", b =>
                {
                    b.Property<int>("WorkdayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkdayID");

                    b.ToTable("Workday");

                    b.HasData(
                        new
                        {
                            WorkdayID = 1,
                            Date = new DateTime(2021, 4, 16, 17, 55, 31, 774, DateTimeKind.Local).AddTicks(4090)
                        },
                        new
                        {
                            WorkdayID = 2,
                            Date = new DateTime(2021, 4, 17, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7155)
                        },
                        new
                        {
                            WorkdayID = 3,
                            Date = new DateTime(2021, 4, 18, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7186)
                        },
                        new
                        {
                            WorkdayID = 4,
                            Date = new DateTime(2021, 4, 19, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7191)
                        },
                        new
                        {
                            WorkdayID = 5,
                            Date = new DateTime(2021, 4, 20, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7194)
                        },
                        new
                        {
                            WorkdayID = 6,
                            Date = new DateTime(2021, 4, 21, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7196)
                        },
                        new
                        {
                            WorkdayID = 7,
                            Date = new DateTime(2021, 4, 22, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7198)
                        },
                        new
                        {
                            WorkdayID = 8,
                            Date = new DateTime(2021, 4, 29, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7201)
                        },
                        new
                        {
                            WorkdayID = 9,
                            Date = new DateTime(2021, 5, 9, 17, 55, 31, 776, DateTimeKind.Local).AddTicks(7204)
                        });
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Anamnesis", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Appointment", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.AppointmentStatus", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.User", "Dentist")
                        .WithMany()
                        .HasForeignKey("DentistID");

                    b.HasOne("eDentalist.WebAPI.Database.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.Workday", "Workday")
                        .WithMany()
                        .HasForeignKey("WorkdayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");

                    b.Navigation("Procedure");

                    b.Navigation("Workday");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Bill", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.City", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Equipment", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.HygieneProcess", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.HygieneProcessType", "HygieneProcessType")
                        .WithMany()
                        .HasForeignKey("HygieneProcessTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HygieneProcessType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Rating", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.Requisition", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentID");

                    b.HasOne("eDentalist.WebAPI.Database.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialID");

                    b.HasOne("eDentalist.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.User", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.HasOne("eDentalist.WebAPI.Database.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("eDentalist.WebAPI.Database.UserWorkday", b =>
                {
                    b.HasOne("eDentalist.WebAPI.Database.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDentalist.WebAPI.Database.Workday", "Workday")
                        .WithMany()
                        .HasForeignKey("WorkdayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("User");

                    b.Navigation("Workday");
                });
#pragma warning restore 612, 618
        }
    }
}
